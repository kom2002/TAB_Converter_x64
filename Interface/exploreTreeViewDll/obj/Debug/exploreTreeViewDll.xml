<?xml version="1.0"?>
<doc>
<assembly>
<name>
exploreTreeViewDll
</name>
</assembly>
<members>
<member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.Dispose">
	<summary>
 Summary of Dispose.
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.Dispose(System.Boolean)">
	<summary>
 Summary of Dispose.
 </summary>
	<param name="disposing"></param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.Finalize">
	<summary>
 Summary of Finalize.
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.#ctor(TAB.Telephony.exploreTreeViewDll.ShellDll.IShellFolder,System.IntPtr,TAB.Telephony.exploreTreeViewDll.CShItem)">
	<summary>
 Private Constructor, creates new CShItem from the item's parent folder and
  the item's PIDL relative to that folder.</summary>
	<param name="folder">the folder interface of the parent</param>
	<param name="pidl">the Relative PIDL of this item</param>
	<param name="parent">the CShitem of the parent</param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.#ctor">
	<summary>
 Private Constructor. Creates CShItem of the Desktop
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.#ctor(TAB.Telephony.exploreTreeViewDll.ShellDll.CSIDL)">
	<summary>Create instance based on a non-desktop CSIDL.
 Will create based on any CSIDL Except the DeskTop CSIDL</summary>
	<param name="ID">Value from CSIDL enumeration denoting the folder to create this CShItem of.</param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.#ctor(System.String)">
	<summary>Create a new CShItem based on a Path Must be a valid FileSystem Path</summary>
	<param name="path"></param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.SetUpAttributes(TAB.Telephony.exploreTreeViewDll.ShellDll.IShellFolder,System.IntPtr)">
	<summary>Get the base attributes of the folder/file that this CShItem represents</summary>
	<param name="folder">Parent Folder of this Item</param>
	<param name="pidl">Relative Pidl of this Item.</param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.SetDispType">
	<summary>
 Set DisplayName, TypeName, and SortFlag when actually needed
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.FillDemandInfo">
	<summary>
 Obtains information available from FileInfo.
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.GetDeskTop">
	<summary>
 If not initialized, then build DesktopBase
 once done, or if initialized already,
 </summary>
	<returns>The DesktopBase CShItem representing the desktop</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.AllFolderWalk(TAB.Telephony.exploreTreeViewDll.CShItem,TAB.Telephony.exploreTreeViewDll.CShItem.WalkAllCallBack,System.Int32,System.Int32)">
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.GetDirectories">
	<summary>
 Returns the Directories of this sub-folder as an ArrayList of CShitems
 </summary>
	<returns>An ArrayList of CShItems. May return an empty ArrayList if there are none.</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.GetFiles">
	<summary>
 Returns the Files of this sub-folder as an
   ArrayList of CShitems
 Note: we do not keep the arraylist of files, Generate it each time
 </summary>
	<returns>An ArrayList of CShItems. May return an empty ArrayList if there are none.</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.GetFiles(System.String)">
	<summary>
 Returns the Files of this sub-folder, filtered by a filtering string, as an
   ArrayList of CShitems
 Note: we do not keep the arraylist of files, Generate it each time
 </summary>
	<param name="Filter">A filter string (for example: *.Doc)</param>
	<returns>An ArrayList of CShItems. May return an empty ArrayList if there are none.</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.GetItems">
	<summary>
 Returns the Directories and Files of this sub-folder as an
   ArrayList of CShitems
 Note: we do not keep the arraylist of files, Generate it each time
 </summary>
	<returns>An ArrayList of CShItems. May return an empty ArrayList if there are none.</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.ToString">
	<summary>
 Summary of ToString.
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.DebugDump">
	<summary>
 Summary of DebugDump.
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.ItemIDSize(System.IntPtr)">
	<summary>
 Get Size in bytes of the first (possibly only)
  SHItem in an ID list.  Note: the full size of
   the item is the sum of the sizes of all SHItems
   in the list!!
 </summary>
	<param name="pidl"></param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.ItemIDListSize(System.IntPtr)">
	<summary>
 computes the actual size of the ItemIDList pointed to by pidl
 </summary>
	<param name="pidl">The pidl pointing to an ItemIDList</param>
	<returns> Returns actual size of the ItemIDList, less the terminating nulnul</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.PidlCount(System.IntPtr)">
	<summary>
 Counts the total number of SHItems in input pidl
 </summary>
	<param name="pidl">The pidl to obtain the count for</param>
	<returns> Returns the count of SHItems pointed to by pidl</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.concatPidls(System.IntPtr,System.IntPtr)">
	<summary>
 Concatenates the contents of two pidls into a new Pidl (ended by 00)
 allocating CoTaskMem to hold the result,
 placing the concatenation (followed by 00) into the
 allocated Memory,
 and returning an IntPtr pointing to the allocated mem
 </summary>
	<param name="pidl1">IntPtr to a well formed SHItemIDList or IntPtr.Zero</param>
	<param name="pidl2">IntPtr to a well formed SHItemIDList or IntPtr.Zero</param>
	<returns>Returns a ptr to an ItemIDList containing the 
   concatenation of the two (followed by the req 2 zeros
   Caller must Free this pidl when done with it</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.TrimPidl(System.IntPtr,System.IntPtr@)">
	<summary>
 Returns an ItemIDList with the last ItemID trimed off
  This is necessary since I cannot get SHBindToParent to work 
  It's purpose is to generate an ItemIDList for the Parent of a
  Special Folder which can then be processed with DesktopBase.BindToObject,
  yeilding a Folder for the parent of the Special Folder
  It also creates and passes back a RELATIVE pidl for this item
 </summary>
	<param name="pidl">A pointer to a well formed ItemIDList. The PIDL to trim</param>
	<param name="relPidl">BYREF IntPtr which will point to a new relative pidl
        containing the contents of the last ItemID in the ItemIDList
        terminated by the required 2 nulls.</param>
	<returns> an ItemIDList with the last element removed.
  Caller must Free this item when through with it
  Also returns the new relative pidl in the 2nd parameter
   Caller must Free this pidl as well, when through with it
</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.DumpPidl(System.IntPtr)">
	<summary>
 Dumps, to the Debug output, the contents of the mem block pointed to by
 a PIDL. Depends on the internal structure of a PIDL
 </summary>
	<param name="pidl">The IntPtr(a PIDL) pointing to the block to dump</param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.ComputeSortFlag">
	<summary>Computes the Sort key of this CShItem, based on its attributes</summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.CShItem.CompareTo(System.Object)">
	<Summary> CompareTo(obj as object)
  Compares obj to this instance based on SortFlag-- obj must be a CShItem</Summary>
	<SortOrder>  (low)Disks,non-browsable System Folders,
              browsable System Folders, 
               Directories, Files, Nothing (high)</SortOrder>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.SystemImageListManager.Initializer">
	<summary>
 Summary of Initializer.
 </summary>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.SystemImageListManager.GetIconIndex(TAB.Telephony.exploreTreeViewDll.CShItem@,System.Boolean)">
	<summary>
 Summary of GetIconIndex.
 </summary>
	<param name="item"></param>
	<param name="GetOpenIcon"></param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.SystemImageListManager.GetIcon(System.Int32)">
	<summary>
 Returns a GDI+ copy of the icon from the ImageList
 at the specified index.</summary>
	<param name="Index">The IconIndex of the desired Icon</param>
	<returns>The specified Icon or Nothing</returns>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.SystemImageListManager.SetListViewImageList(System.Windows.Forms.ListView,System.Boolean,System.Boolean)">
	<summary>
 Summary of SetListViewImageList.
 </summary>
	<param name="listView"></param>
	<param name="forLargeIcons"></param>
	<param name="forStateImages"></param>
</member><member name="M:TAB.Telephony.exploreTreeViewDll.SystemImageListManager.SetTreeViewImageList(System.Windows.Forms.TreeView,System.Boolean)">
	<summary>
 Summary of SetTreeViewImageList.
 </summary>
	<param name="treeView"></param>
	<param name="forStateImages"></param>
</member>
</members>
</doc>